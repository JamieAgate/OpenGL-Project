#version 430 core
out vec4 FragColour;

uniform vec3 cameraPos;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

struct Material
{
	sampler2D diffuseMap;
	sampler2D specMap;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light
{
	int lightID;
	
	vec3 position;
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float cutOff;
	float outerCutOff;
	
	float constant;
	float linear;
	float quadratic;
};

struct DirLight
{
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight
{
	vec3 position;
	
	float constant;
	float linear;
	float quadratic;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct FlashLight
{
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;
	
	float constant;
	float linear;
	float quadratic;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define NR_POINT_LIGHTS 4

uniform Material material;
uniform DirLight dirlight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform FlashLight flashlight;
uniform Light light;

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir,vec3 diffuseParalax);
vec3 calcPointLights(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir,vec3 diffuseParalax);
vec3 calcSpotLight(FlashLight light, vec3 normal, vec3 fragPos, vec3 viewDir,vec3 diffuseParalax);

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
  
uniform float height_scale;

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir);
  
void main()
{           
    // offset texture coordinates with Parallax Mapping
    vec3 viewDir   = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
	vec2 texCoords = fs_in.TexCoords;

    texCoords = ParallaxMapping(fs_in.TexCoords,  viewDir);
	if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
	{
        discard;
	}
	
    // then sample textures with new texture coords
    vec3 colour = texture(diffuseMap, texCoords).rgb;
    vec3 normal  = texture(normalMap, texCoords).rgb;
    normal = normalize(normal * 2.0 - 1.0);

    // proceed with lighting code
	vec3 result = {0.0f,0.0f,0.0f};
	
	result += calcDirLight(dirlight,normal,viewDir,colour);
	
	for(int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += calcPointLights(pointLights[i],normal,fs_in.FragPos,viewDir,colour);
	}
	
	result += calcSpotLight(flashlight,normal,fs_in.FragPos,viewDir,colour);
	
	FragColour = vec4(result,1.0);
}

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir,vec3 diffuseParalax)
{
	vec3 lightDir = normalize(-light.direction);
	
	float diff = max(dot(normal, lightDir), 0.0);
	
	vec3 reflectDir = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
	
	vec3 ambient = light.ambient * diffuseParalax;
	vec3 diffuse = light.diffuse * diff * diffuseParalax;
	vec3 specular = light.specular * spec;
	
	return (ambient + diffuse + specular);
}

vec3 calcPointLights(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir,vec3 diffuseParalax)
{
	vec3 lightDir = normalize(light.position - fragPos);
	
	float diff = max(dot(normal, lightDir),0.0);
	
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal,halfwayDir),0.0),material.shininess);
	
	float distance = length(light.position - fragPos);
	float attenuation = 1.0/(light.constant + light.linear * distance + light.quadratic *(distance * distance));
	
	vec3 ambient = light.ambient * diffuseParalax;
	vec3 diffuse = light.diffuse * diff * diffuseParalax;
	vec3 specular = light.specular * spec;
	
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	
	return (ambient + diffuse + specular);
}

vec3 calcSpotLight(FlashLight light, vec3 normal, vec3 fragPos, vec3 viewDir,vec3 diffuseParalax)
{
	 vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * diffuseParalax;
    vec3 diffuse = light.diffuse * diff * diffuseParalax;
    vec3 specular = light.specular * spec;
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    float height =  texture(depthMap, texCoords).r;    
    vec2 p = viewDir.xy * (height * 0.1);
    return texCoords - p;    
} 