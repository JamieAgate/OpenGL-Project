#version 430 core

// Input per-fragment data
// These must correspond to the varying outputs from the vertex shader
in vec3 vNormalV;
in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;
in vec2 texCoord;
in vec3 fragPos;

// Input uniform data - these have values that will be the same for every fragment
uniform vec3 lightColour = {1.0,1.0,1.0};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {1.0f,1.0f,1.0f};
uniform vec3 diffuseColour  = {1.0f,1.0f,1.0f};
uniform vec3 specularColour = {1.0f,1.0f,1.0f};
uniform float shininess     = 50.0f;
uniform float alpha         = 1.0f;
uniform vec3 worldLightPos;
uniform vec3 cameraPos;

// The output of the fragment shader is the fragment's colour
out vec4 fragColour;

// This is another input to allow us to access a texture

struct Material
{
	sampler2D diffuseMap;
	sampler2D specMap;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light
{
	int lightID;
	
	vec3 position;
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float cutOff;
	float outerCutOff;
	
	float constant;
	float linear;
	float quadratic;
};

struct DirLight
{
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight
{
	vec3 position;
	
	float constant;
	float linear;
	float quadratic;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define NR_POINT_LIGHTS 4

uniform Material material;
uniform DirLight dirlight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform Light light;

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 calcPointLights(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
	vec3 normal = normalize( vNormalV );
	vec3 viewDir = normalize(cameraPos - fragPos);
	
	vec3 result = {0.0f,0.0f,0.0f};
	
	result += calcDirLight(dirlight,normal,viewDir);
	
	for(int i = 0; i < 3; i++)
	{
		result += calcPointLights(pointLights[i],normal,fragPos,viewDir);
	}
	
	fragColour = vec4(result,1.0);
}

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDir = normalize(-light.direction);
	
	float diff = max(dot(normal, lightDir), 0.0);
	
	vec3 reflectDir = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
	
	vec3 ambient = light.ambient * vec3(texture(material.diffuseMap,texCoord));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap,texCoord));
	vec3 specular = light.specular * spec * vec3(texture(material.specMap,texCoord));
	
	return (ambient + diffuse + specular);
}

vec3 calcPointLights(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	
	float diff = max(dot(normal, lightDir),0.0);
	
	vec3 reflectDir = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	
	float distance = length(light.position - fragPos);
	float attenuation = 1.0/(light.constant + light.linear * distance + light.quadratic *(distance * distance));
	
	vec3 ambient = light.ambient * vec3(texture(material.diffuseMap,texCoord));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap,texCoord));
	vec3 specular = light.specular * spec * vec3(texture(material.specMap,texCoord));
	
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	
	return (ambient + diffuse + specular);
}